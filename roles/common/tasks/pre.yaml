- name: Check if temporary swap is disabled
  register: total_swap
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      cat /proc/meminfo | grep SwapTotal: | awk '{ print $2 }'
  args:
    executable: /bin/bash
  changed_when: false

- name: Disable swap temporary
  become: true
  ansible.builtin.command: swapoff -a
  when: total_swap.stdout | int != 0

######## to be fixed risky shell pipe

# - name: Check if permanent swap is disabled
#   register: swap_fstab
#   ansible.builtin.shell: cat /etc/fstab | grep swap | head -c 1
#   args:
#     executable: /bin/bash
#   changed_when: false
# TODO check if swap is permanatly disabled on ubuntu
# sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /home/ubuntu/fstab1

- name: Stop and disable swap permanently
  become: true
  ansible.builtin.service:
    name: dphys-swapfile
    state: stopped
    enabled: false
  when: rpi


- name: Create k8s modules config
  become: true
  vars:
    text: |
      overlay
      br_netfilter
  ansible.builtin.copy:
    content: "{{ text }}"
    dest: /etc/modules-load.d/k8s.conf
    mode: '0644'
  register: k8s_kernel_modules


- name: Add kernel modules
  become: true
  ansible.builtin.command: "modprobe {{ item }}"
  when: k8s_kernel_modules.changed
  loop:
    - overlay
    - br_netfilter

- name: Create bridged traffic config
  become: true
  ansible.builtin.copy:
    src: files/bridged.traffic.conf
    dest: /etc/sysctl.d/k8s.conf
    mode: '0644'
  register: sysctl_k8s

- name: Load kernel settings
  become: true
  ansible.builtin.command: sysctl -p --system
  when: sysctl_k8s.changed

#### needed for raspberrypi
- name: Read /boot/cmdline.txt
  tags: test
  ansible.builtin.slurp:
    src: /boot/cmdline.txt
  register: cmdline
  when: rpi


- name: Fact for /boot/cmdline.txt
  when: rpi
  block:
    - name: Set fact for /boot/cmdline.txt rpi
      vars:
        cmdl: "{{ cmdline['content'] | b64decode | split }}"
      ansible.builtin.set_fact:
        append: "{{ append | default([]) + [item] }}"
      when: cmdl is not contains(item)
      loop:
        - cgroup_enable=memory
        - cgroup_enable=cpuset
    - name: Update /boot/cmdline.txt
      become: true
      vars:
        file_content: "{{ cmdline['content'] | b64decode | trim }}"
      ansible.builtin.copy:
        content: "{{ file_content }} {{ append | join(' ') }}\n"
        dest: /boot/cmdline.txt
      when: append is defined and rpi
      notify:
        - Reboot machine

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
